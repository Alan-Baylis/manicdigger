//http://www.khronos.org/registry/webgl/specs/latest/
//https://www.khronos.org/registry/webgl/specs/latest/webgl.idl

//// AUTOGENERATED FILE -- DO NOT EDIT -- SEE Makefile
////
//// WebGL IDL definitions scraped from the Khronos specification:
//// https://www.khronos.org/registry/webgl/specs/latest/
////
//// This IDL depends on the typed array specification defined at:
//// https://www.khronos.org/registry/typedarray/specs/latest/typedarrays.idl

//typedef unsigned long  GLenum;
//typedef boolean        GLboolean;
//typedef unsigned long  GLbitfield;
//typedef byte           GLbyte;         /* 'byte' should be a signed 8 bit type. */
//typedef short          GLshort;
//typedef long           GLint;
//typedef long           GLsizei;
//typedef long long      GLintptr;
//typedef long long      GLsizeiptr;
//// Ideally the typedef below would use 'unsigned byte', but that doesn't currently exist in Web IDL.
//typedef octet          GLubyte;        /* 'octet' should be an unsigned 8 bit type. */
//typedef unsigned short GLushort;
//typedef unsigned long  GLuint;
//typedef unrestricted float GLfloat;
//typedef unrestricted float GLclampf;  


public class WebGLContextAttributes
{
    public WebGLContextAttributes()
    {
        alpha = true;
        depth = true;
        stencil = false;
        antialias = true;
        premultipliedAlpha = true;
        preserveDrawingBuffer = false;
    }
#if !CITO
    internal
#endif
 bool alpha;
#if !CITO
    internal
#endif
 bool depth;
#if !CITO
    internal
#endif
 bool stencil;
#if !CITO
    internal
#endif
 bool antialias;
#if !CITO
    internal
#endif
 bool premultipliedAlpha;
#if !CITO
    internal
#endif
 bool preserveDrawingBuffer;
}

public abstract class WebGLObject
{
}

public abstract class WebGLBuffer : WebGLObject
{
}

public abstract class WebGLFramebuffer : WebGLObject
{
}

public abstract class WebGLProgram : WebGLObject
{
}

public abstract class WebGLRenderbuffer : WebGLObject
{
}

public abstract class WebGLShader : WebGLObject
{
}

public abstract class WebGLTexture : WebGLObject
{
}

public abstract class WebGLUniformLocation
{
}

public abstract class WebGLActiveInfo
{
    public abstract int size();
    public abstract int type();
    public abstract string name();
}

public abstract class WebGLShaderPrecisionFormat
{
    public abstract int rangeMin();
    public abstract int rangeMax();
    public abstract int precision();
}

public abstract class GlArrayBuffer
{
}

public abstract class GlArrayBufferView
{
}

public abstract class GlObject
{
}

public class Int
{
#if !CITO
    internal
#endif
 int value;
}

public abstract class NewFrameHandler
{
    public abstract void OnNewFrame(NewFrameEventArgs args);
}

public abstract class ImageOnLoadHandler
{
    public abstract void OnLoad();
}

public abstract class KeyEventHandler
{
    public abstract void OnKeyDown(KeyEventArgs e);
    public abstract void OnKeyPress(KeyPressEventArgs e);
    public abstract void OnKeyUp(KeyEventArgs e);
}

public class MouseEventArgs
{
    int x;
    int y;
    int movementX;
    int movementY;
    int button;
    public int GetX() { return x; } public void SetX(int value) { x = value; }
    public int GetY() { return y; } public void SetY(int value) { y = value; }
    public int GetMovementX() { return movementX; } public void SetMovementX(int value) { movementX = value; }
    public int GetMovementY() { return movementY; } public void SetMovementY(int value) { movementY = value; }
    public int GetButton() { return button; } public void SetButton(int value) { button = value; }
}

public class MouseWheelEventArgs
{
    int delta;
    float deltaPrecise;
    public int GetDelta() { return delta; } public void SetDelta(int value) { delta = value; }
    public float GetDeltaPrecise() { return deltaPrecise; } public void SetDeltaPrecise(float value) { deltaPrecise = value; }
}

public class MouseButtonEnum
{
    public const int Left = 0;
    public const int Middle = 1;
    public const int Right = 2;
}

public abstract class MouseEventHandler
{
    public abstract void OnMouseDown(MouseEventArgs e);
    public abstract void OnMouseUp(MouseEventArgs e);
    public abstract void OnMouseMove(MouseEventArgs e);
    public abstract void OnMouseWheel(MouseWheelEventArgs e);
}

public class TouchEventArgs
{
    int x;
    int y;
    int id;
    public int GetX() { return x; } public void SetX(int value) { x = value; }
    public int GetY() { return y; } public void SetY(int value) { y = value; }
    public int GetId() { return id; } public void SetId(int value) { id = value; }
}

public abstract class TouchEventHandler
{
    public abstract void OnTouchStart(TouchEventArgs e);
    public abstract void OnTouchMove(TouchEventArgs e);
    public abstract void OnTouchEnd(TouchEventArgs e);
}

public class NewFrameEventArgs
{
    float dt;
    public float GetDt()
    {
        return dt;
    }
    public void SetDt(float p)
    {
        this.dt = p;
    }
}

public abstract class HTMLImageElement
{
    public abstract ImageOnLoadHandler GetOnLoad();
    public abstract void SetOnLoad(ImageOnLoadHandler handler);
    public abstract string GetSrc();
    public abstract void SetSrc(string p);
}

public abstract class ImageData
{
}

public abstract class HTMLCanvasElement
{
}

public abstract class HTMLVideoElement
{
}

public abstract class Gl
{
    //    /* ClearBufferMask */
    public const int DepthBufferBit = 0x00000100;
    public const int StencilBufferBit = 0x00000400;
    public const int ColorBufferBit = 0x00004000;

    //    /* BeginMode */
    public const int Points = 0x0000;
    public const int Lines = 0x0001;
    public const int LineLoop = 0x0002;
    public const int LineStrip = 0x0003;
    public const int Triangles = 0x0004;
    public const int TriangleStrip = 0x0005;
    public const int TriangleFan = 0x0006;

    // AlphaFunction (not supported in ES20) 
    //      NEVER 
    //      LESS 
    //      EQUAL 
    //      LEQUAL 
    //      GREATER 
    //      NOTEQUAL 
    //      GEQUAL 
    //      ALWAYS 

    // BlendingFactorDest 
    public const int Zero = 0;
    public const int One = 1;
    public const int SrcColor = 0x0300;
    public const int OneMinusSrcColor = 0x0301;
    public const int SrcAlpha = 0x0302;
    public const int OneMinusSrcAlpha = 0x0303;
    public const int DstAlpha = 0x0304;
    public const int OneMinusDstAlpha = 0x0305;

    // BlendingFactorSrc 
    //      ZERO 
    //      ONE 
    public const int DstColor = 0x0306;
    public const int OneMinusDstColor = 0x0307;
    public const int SrcAlphaSaturate = 0x0308;
    //      SRC_ALPHA 
    //      ONE_MINUS_SRC_ALPHA 
    //      DST_ALPHA 
    //      ONE_MINUS_DST_ALPHA 

    // BlendEquationSeparate 
    public const int FuncAdd = 0x8006;
    public const int BlendEquation_ = 0x8009;
    public const int BlendEquationRgb = 0x8009;   // same as BLEND_EQUATION 
    public const int BlendEquationAlpha = 0x883D;

    // BlendSubtract 
    public const int FuncSubtract = 0x800A;
    public const int FuncReverseSubtract = 0x800B;

    // Separate Blend Functions 
    public const int BlendDstRgb = 0x80C8;
    public const int BlendSrcRgb = 0x80C9;
    public const int BlendDstAlpha = 0x80CA;
    public const int BlendSrcAlpha = 0x80CB;
    public const int ConstantColor = 0x8001;
    public const int OneMinusConstantColor = 0x8002;
    public const int ConstantAlpha = 0x8003;
    public const int OneMinusConstantAlpha = 0x8004;
    public const int BlendColor_ = 0x8005;

    // Buffer Objects 
    public const int ArrayBuffer_ = 0x8892;
    public const int ElementArrayBuffer = 0x8893;
    public const int ArrayBufferBinding = 0x8894;
    public const int ElementArrayBufferBinding = 0x8895;

    public const int StreamDraw = 0x88E0;
    public const int StaticDraw = 0x88E4;
    public const int DynamicDraw = 0x88E8;

    public const int BufferSize = 0x8764;
    public const int BufferUsage = 0x8765;

    public const int CurrentVertexAttrib = 0x8626;

    // CullFaceMode 
    public const int Front = 0x0404;
    public const int Back = 0x0405;
    public const int FrontAndBack = 0x0408;

    // DepthFunction 
    //      NEVER 
    //      LESS 
    //      EQUAL 
    //      LEQUAL 
    //      GREATER 
    //      NOTEQUAL 
    //      GEQUAL 
    //      ALWAYS 

    // EnableCap 
    // TEXTURE_2D 
    public const int CullFace_ = 0x0B44;
    public const int Blend = 0x0BE2;
    public const int Dither = 0x0BD0;
    public const int StencilTest = 0x0B90;
    public const int DepthTest = 0x0B71;
    public const int ScissorTest = 0x0C11;
    public const int PolygonOffsetFill = 0x8037;
    public const int SampleAlphaToCoverage = 0x809E;
    public const int SampleCoverage_ = 0x80A0;

    // ErrorCode 
    public const int NoError = 0;
    public const int InvalidEnum = 0x0500;
    public const int InvalidValue = 0x0501;
    public const int InvalidOperation = 0x0502;
    public const int OutOfMemory = 0x0505;

    // FrontFaceDirection 
    public const int Cw = 0x0900;
    public const int Ccw = 0x0901;

    // GetPName 
    public const int LineWidth_ = 0x0B21;
    public const int AliasedPointSizeRange = 0x846D;
    public const int AliasedLineWidthRange = 0x846E;
    public const int CullFaceMode = 0x0B45;
    public const int FrontFace_ = 0x0B46;
    public const int DepthRange_ = 0x0B70;
    public const int DepthWritemask = 0x0B72;
    public const int DepthClearValue = 0x0B73;
    public const int DepthFunc_ = 0x0B74;
    public const int StencilClearValue = 0x0B91;
    public const int StencilFunc_ = 0x0B92;
    public const int StencilFail = 0x0B94;
    public const int StencilPassDepthFail = 0x0B95;
    public const int StencilPassDepthPass = 0x0B96;
    public const int StencilRef = 0x0B97;
    public const int StencilValueMask = 0x0B93;
    public const int StencilWritemask = 0x0B98;
    public const int StencilBackFunc = 0x8800;
    public const int StencilBackFail = 0x8801;
    public const int StencilBackPassDepthFail = 0x8802;
    public const int StencilBackPassDepthPass = 0x8803;
    public const int StencilBackRef = 0x8CA3;
    public const int StencilBackValueMask = 0x8CA4;
    public const int StencilBackWritemask = 0x8CA5;
    public const int Viewport_ = 0x0BA2;
    public const int ScissorBox = 0x0C10;
    //      SCISSOR_TEST 
    public const int ColorClearValue = 0x0C22;
    public const int ColorWritemask = 0x0C23;
    public const int UnpackAlignment = 0x0CF5;
    public const int PackAlignment = 0x0D05;
    public const int MaxTextureSize = 0x0D33;
    public const int MaxViewportDims = 0x0D3A;
    public const int SubpixelBits = 0x0D50;
    public const int RedBits = 0x0D52;
    public const int GreenBits = 0x0D53;
    public const int BlueBits = 0x0D54;
    public const int AlphaBits = 0x0D55;
    public const int DepthBits = 0x0D56;
    public const int StencilBits = 0x0D57;
    public const int PolygonOffsetUnits = 0x2A00;
    //      POLYGON_OFFSET_FILL 
    public const int PolygonOffsetFactor = 0x8038;
    public const int TextureBinding2d = 0x8069;
    public const int SampleBuffers = 0x80A8;
    public const int Samples = 0x80A9;
    public const int SampleCoverageValue = 0x80AA;
    public const int SampleCoverageInvert = 0x80AB;

    // GetTextureParameter 
    //      TEXTURE_MAG_FILTER 
    //      TEXTURE_MIN_FILTER 
    //      TEXTURE_WRAP_S 
    //      TEXTURE_WRAP_T 

    public const int CompressedTextureFormats = 0x86A3;

    // HintMode 
    public const int DontCare = 0x1100;
    public const int Fastest = 0x1101;
    public const int Nicest = 0x1102;

    // HintTarget 
    public const int GenerateMipmapHint = 0x8192;

    // DataType 
    public const int Byte = 0x1400;
    public const int UnsignedByte = 0x1401;
    public const int Short = 0x1402;
    public const int UnsignedShort = 0x1403;
    public const int Int_ = 0x1404;
    public const int UnsignedInt = 0x1405;
    public const int Float = 0x1406;

    // PixelFormat 
    public const int DepthComponent = 0x1902;
    public const int Alpha = 0x1906;
    public const int Rgb = 0x1907;
    public const int Rgba = 0x1908;
    public const int Luminance = 0x1909;
    public const int LuminanceAlpha = 0x190A;

    // PixelType 
    //      UNSIGNED_BYTE 
    public const int UnsignedShort4444 = 0x8033;
    public const int UnsignedShort5551 = 0x8034;
    public const int UnsignedShort565 = 0x8363;

    // Shaders 
    public const int FragmentShader = 0x8B30;
    public const int VertexShader = 0x8B31;
    public const int MaxVertexAttribs = 0x8869;
    public const int MaxVertexUniformVectors = 0x8DFB;
    public const int MaxVaryingVectors = 0x8DFC;
    public const int MaxCombinedTextureImageUnits = 0x8B4D;
    public const int MaxVertexTextureImageUnits = 0x8B4C;
    public const int MaxTextureImageUnits = 0x8872;
    public const int MaxFragmentUniformVectors = 0x8DFD;
    public const int ShaderType = 0x8B4F;
    public const int DeleteStatus = 0x8B80;
    public const int LinkStatus = 0x8B82;
    public const int ValidateStatus = 0x8B83;
    public const int AttachedShaders = 0x8B85;
    public const int ActiveUniforms = 0x8B86;
    public const int ActiveAttributes = 0x8B89;
    public const int ShadingLanguageVersion = 0x8B8C;
    public const int CurrentProgram = 0x8B8D;

    // StencilFunction 
    public const int Never = 0x0200;
    public const int Less = 0x0201;
    public const int Equal = 0x0202;
    public const int Lequal = 0x0203;
    public const int Greater = 0x0204;
    public const int Notequal = 0x0205;
    public const int Gequal = 0x0206;
    public const int Always = 0x0207;

    // StencilOp 
    //      ZERO 
    public const int Keep = 0x1E00;
    public const int Replace = 0x1E01;
    public const int Incr = 0x1E02;
    public const int Decr = 0x1E03;
    public const int Invert = 0x150A;
    public const int IncrWrap = 0x8507;
    public const int DecrWrap = 0x8508;

    // StringName 
    public const int Vendor = 0x1F00;
    public const int Renderer = 0x1F01;
    public const int Version = 0x1F02;

    // TextureMagFilter 
    public const int Nearest = 0x2600;
    public const int Linear = 0x2601;

    // TextureMinFilter 
    //      NEAREST 
    //      LINEAR 
    public const int NearestMipmapNearest = 0x2700;
    public const int LinearMipmapNearest = 0x2701;
    public const int NearestMipmapLinear = 0x2702;
    public const int LinearMipmapLinear = 0x2703;

    // TextureParameterName 
    public const int TextureMagFilter = 0x2800;
    public const int TextureMinFilter = 0x2801;
    public const int TextureWrapS = 0x2802;
    public const int TextureWrapT = 0x2803;

    // TextureTarget 
    public const int Texture2d = 0x0DE1;
    public const int Texture = 0x1702;

    public const int TextureCubeMap = 0x8513;
    public const int TextureBindingCubeMap = 0x8514;
    public const int TextureCubeMapPositiveX = 0x8515;
    public const int TextureCubeMapNegativeX = 0x8516;
    public const int TextureCubeMapPositiveY = 0x8517;
    public const int TextureCubeMapNegativeY = 0x8518;
    public const int TextureCubeMapPositiveZ = 0x8519;
    public const int TextureCubeMapNegativeZ = 0x851A;
    public const int MaxCubeMapTextureSize = 0x851C;

    // TextureUnit 
    public const int Texture0 = 0x84C0;
    public const int Texture1 = 0x84C1;
    public const int Texture2 = 0x84C2;
    public const int Texture3 = 0x84C3;
    public const int Texture4 = 0x84C4;
    public const int Texture5 = 0x84C5;
    public const int Texture6 = 0x84C6;
    public const int Texture7 = 0x84C7;
    public const int Texture8 = 0x84C8;
    public const int Texture9 = 0x84C9;
    public const int Texture10 = 0x84CA;
    public const int Texture11 = 0x84CB;
    public const int Texture12 = 0x84CC;
    public const int Texture13 = 0x84CD;
    public const int Texture14 = 0x84CE;
    public const int Texture15 = 0x84CF;
    public const int Texture16 = 0x84D0;
    public const int Texture17 = 0x84D1;
    public const int Texture18 = 0x84D2;
    public const int Texture19 = 0x84D3;
    public const int Texture20 = 0x84D4;
    public const int Texture21 = 0x84D5;
    public const int Texture22 = 0x84D6;
    public const int Texture23 = 0x84D7;
    public const int Texture24 = 0x84D8;
    public const int Texture25 = 0x84D9;
    public const int Texture26 = 0x84DA;
    public const int Texture27 = 0x84DB;
    public const int Texture28 = 0x84DC;
    public const int Texture29 = 0x84DD;
    public const int Texture30 = 0x84DE;
    public const int Texture31 = 0x84DF;
    public const int ActiveTextureConst = 0x84E0;

    // TextureWrapMode 
    public const int Repeat = 0x2901;
    public const int ClampToEdge = 0x812F;
    public const int MirroredRepeat = 0x8370;

    // Uniform Types 
    public const int FloatVec2 = 0x8B50;
    public const int FloatVec3 = 0x8B51;
    public const int FloatVec4 = 0x8B52;
    public const int IntVec2 = 0x8B53;
    public const int IntVec3 = 0x8B54;
    public const int IntVec4 = 0x8B55;
    public const int Bool = 0x8B56;
    public const int BoolVec2 = 0x8B57;
    public const int BoolVec3 = 0x8B58;
    public const int BoolVec4 = 0x8B59;
    public const int FloatMat2 = 0x8B5A;
    public const int FloatMat3 = 0x8B5B;
    public const int FloatMat4 = 0x8B5C;
    public const int Sampler2d = 0x8B5E;
    public const int SamplerCube = 0x8B60;

    // Vertex Arrays 
    public const int VertexAttribArrayEnabled = 0x8622;
    public const int VertexAttribArraySize = 0x8623;
    public const int VertexAttribArrayStride = 0x8624;
    public const int VertexAttribArrayType = 0x8625;
    public const int VertexAttribArrayNormalized = 0x886A;
    public const int VertexAttribArrayPointer = 0x8645;
    public const int VertexAttribArrayBufferBinding = 0x889F;

    // Shader Source 
    public const int CompileStatus = 0x8B81;

    // Shader Precision-Specified Types 
    public const int LowFloat = 0x8DF0;
    public const int MediumFloat = 0x8DF1;
    public const int HighFloat = 0x8DF2;
    public const int LowInt = 0x8DF3;
    public const int MediumInt = 0x8DF4;
    public const int HighInt = 0x8DF5;

    // Framebuffer Object. 
    public const int Framebuffer = 0x8D40;
    public const int Renderbuffer = 0x8D41;

    public const int Rgba4 = 0x8056;
    public const int Rgb5A1 = 0x8057;
    public const int Rgb565 = 0x8D62;
    public const int DepthComponent16 = 0x81A5;
    public const int StencilIndex = 0x1901;
    public const int StencilIndex8 = 0x8D48;
    public const int DepthStencil = 0x84F9;

    public const int RenderbufferWidth = 0x8D42;
    public const int RenderbufferHeight = 0x8D43;
    public const int RenderbufferInternalFormat = 0x8D44;
    public const int RenderbufferRedSize = 0x8D50;
    public const int RenderbufferGreenSize = 0x8D51;
    public const int RenderbufferBlueSize = 0x8D52;
    public const int RenderbufferAlphaSize = 0x8D53;
    public const int RenderbufferDepthSize = 0x8D54;
    public const int RenderbufferStencilSize = 0x8D55;

    public const int FramebufferAttachmentObjectType = 0x8CD0;
    public const int FramebufferAttachmentObjectName = 0x8CD1;
    public const int FramebufferAttachmentTextureLevel = 0x8CD2;
    public const int FramebufferAttachmentTextureCubeMapFace = 0x8CD3;

    public const int ColorAttachment0 = 0x8CE0;
    public const int DepthAttachment = 0x8D00;
    public const int StencilAttachment = 0x8D20;
    public const int DepthStencilAttachment = 0x821A;

    public const int None = 0;

    public const int FramebufferComplete = 0x8CD5;
    public const int FramebufferIncompleteAttachment = 0x8CD6;
    public const int FramebufferIncompleteMissingAttachment = 0x8CD7;
    public const int FramebufferIncompleteDimensions = 0x8CD9;
    public const int FramebufferUnsupported = 0x8CDD;

    public const int FramebufferBinding = 0x8CA6;
    public const int RenderbufferBinding = 0x8CA7;
    public const int MaxRenderbufferSize = 0x84E8;

    public const int InvalidFramebufferOperation = 0x0506;

    // WebGL-specific enums 
    public const int UnpackFlipYWebgl = 0x9240;
    public const int UnpackPremultiplyAlphaWebgl = 0x9241;
    public const int ContextLostWebgl = 0x9242;
    public const int UnpackColorspaceConversionWebgl = 0x9243;
    public const int BrowserDefaultWebgl = 0x9244;

    //    readonly attribute HTMLCanvasElement canvas;
    public abstract int DrawingBufferWidth();
    public abstract int DrawingBufferHeight();

    //    [WebGLHandlesContextLoss]
    public abstract WebGLContextAttributes GetContextAttributes();
    //    [WebGLHandlesContextLoss]
    public abstract bool IsContextLost();

    public abstract string[] GetSupportedExtensions(Int outCount);
    public abstract GlObject GetExtension(string name);

    public abstract void ActiveTexture(int texture);
    public abstract void AttachShader(WebGLProgram program, WebGLShader shader);
    public abstract void BindAttribLocation(WebGLProgram program, int index, string name);
    public abstract void BindBuffer(int target, WebGLBuffer buffer);
    public abstract void BindFramebuffer(int target, WebGLFramebuffer framebuffer);
    public abstract void BindRenderbuffer(int target, WebGLRenderbuffer renderbuffer);
    public abstract void BindTexture(int target, WebGLTexture texture);
    public abstract void BlendColor(float red, float green, float blue, float alpha);
    public abstract void BlendEquation(int mode);
    public abstract void BlendEquationSeparate(int modeRGB, int modeAlpha);
    public abstract void BlendFunc(int sfactor, int dfactor);
    public abstract void BlendFuncSeparate(int srcRGB, int dstRGB,
                               int srcAlpha, int dstAlpha);

    public abstract void BufferData1(int target, int size, int usage);
    public abstract void BufferData2(int target, GlArrayBufferView data, int usage);
    public abstract void BufferData3(int target, GlArrayBuffer data, int usage);
    public abstract void BufferDataFloat(int target, float[] data, int usage);
    public abstract void BufferDataUshort(int target, int[] data, int usage);
    public abstract void BufferSubData1(int target, int offset, GlArrayBufferView data);
    public abstract void BufferSubData2(int target, int offset, GlArrayBuffer data);

    //    [WebGLHandlesContextLoss]
    public abstract int CheckFramebufferStatus(int target);
    public abstract void Clear(int mask);
    public abstract void ClearColor(float red, float green, float blue, float alpha);
    public abstract void ClearDepth(float depth);
    public abstract void ClearStencil(int s);
    public abstract void ColorMask(bool red, bool green, bool blue, bool alpha);
    public abstract void CompileShader(WebGLShader shader);

    public abstract void CompressedTexImage2D(int target, int level, int internalformat,
                              int width, int height, int border,
                              GlArrayBufferView data);
    public abstract void CompressedTexSubImage2D(int target, int level,
                                 int xoffset, int yoffset,
                                 int width, int height, int format,
                                 GlArrayBufferView data);

    public abstract void CopyTexImage2D(int target, int level, int internalformat,
                        int x, int y, int width, int height,
                        int border);
    public abstract void CopyTexSubImage2D(int target, int level, int xoffset, int yoffset,
                           int x, int y, int width, int height);

    public abstract WebGLBuffer CreateBuffer();
    public abstract WebGLFramebuffer CreateFramebuffer();
    public abstract WebGLProgram CreateProgram();
    public abstract WebGLRenderbuffer CreateRenderbuffer();
    public abstract WebGLShader CreateShader(int type);
    public abstract WebGLTexture CreateTexture();

    public abstract void CullFace(int mode);

    public abstract void DeleteBuffer(WebGLBuffer buffer);
    public abstract void DeleteFramebuffer(WebGLFramebuffer framebuffer);
    public abstract void DeleteProgram(WebGLProgram program);
    public abstract void DeleteRenderbuffer(WebGLRenderbuffer renderbuffer);
    public abstract void DeleteShader(WebGLShader shader);
    public abstract void DeleteTexture(WebGLTexture texture);

    public abstract void DepthFunc(int func);
    public abstract void DepthMask(bool flag);
    public abstract void DepthRange(float zNear, float zFar);
    public abstract void DetachShader(WebGLProgram program, WebGLShader shader);
    public abstract void Disable(int cap);
    public abstract void DisableVertexAttribArray(int index);
    public abstract void DrawArrays(int mode, int first, int count);
    public abstract void DrawElements(int mode, int count, int type, int offset);

    public abstract void Enable(int cap);
    public abstract void EnableVertexAttribArray(int index);
    public abstract void Finish();
    public abstract void Flush();
    public abstract void FramebufferRenderbuffer(int target, int attachment,
                                 int renderbuffertarget,
                                 WebGLRenderbuffer renderbuffer);
    public abstract void FramebufferTexture2D(int target, int attachment, int textarget,
                              WebGLTexture texture, int level);
    public abstract void FrontFace(int mode);

    public abstract void GenerateMipmap(int target);

    public abstract WebGLActiveInfo GetActiveAttrib(WebGLProgram program, int index);
    public abstract WebGLActiveInfo GetActiveUniform(WebGLProgram program, int index);
    public abstract WebGLShader[] GetAttachedShaders(WebGLProgram program, Int outCount);

    //[WebGLHandlesContextLoss]
    public abstract int GetAttribLocation(WebGLProgram program, string name);

    public abstract GlObject GetBufferParameter(int target, int pname);
    public abstract GlObject GetParameter(int pname);

    //    [WebGLHandlesContextLoss]
    public abstract int GetError();

    public abstract GlObject GetFramebufferAttachmentParameter(int target, int attachment,
                                              int pname);
    public abstract string GetProgramParameter(WebGLProgram program, int pname);
    public abstract string GetProgramInfoLog(WebGLProgram program);
    public abstract GlObject GetRenderbufferParameter(int target, int pname);
    public abstract GlObject GetShaderParameter(WebGLShader shader, int pname);
    public abstract WebGLShaderPrecisionFormat GetShaderPrecisionFormat(int shadertype, int precisiontype);
    public abstract string GetShaderInfoLog(WebGLShader shader);

    public abstract string GetShaderSource(WebGLShader shader);

    public abstract GlObject GetTexParameter(int target, int pname);

    public abstract GlObject GetUniform(WebGLProgram program, WebGLUniformLocation location);

    public abstract WebGLUniformLocation GetUniformLocation(WebGLProgram program, string name);

    public abstract GlObject GetVertexAttrib(int index, int pname);

    //    [WebGLHandlesContextLoss]
    public abstract int GetVertexAttribOffset(int index, int pname);

    public abstract void Hint(int target, int mode);
    //    [WebGLHandlesContextLoss]
    public abstract bool IsBuffer(WebGLBuffer buffer);
    //    [WebGLHandlesContextLoss]
    public abstract bool IsEnabled(int cap);
    //    [WebGLHandlesContextLoss]
    public abstract bool IsFramebuffer(WebGLFramebuffer framebuffer);
    //    [WebGLHandlesContextLoss]
    public abstract bool IsProgram(WebGLProgram program);
    //    [WebGLHandlesContextLoss]
    public abstract bool IsRenderbuffer(WebGLRenderbuffer renderbuffer);
    //    [WebGLHandlesContextLoss]
    public abstract bool IsShader(WebGLShader shader);
    //    [WebGLHandlesContextLoss]
    public abstract bool IsTexture(WebGLTexture texture);
    public abstract void LineWidth(float width);
    public abstract void LinkProgram(WebGLProgram program);
    public abstract void PixelStorei(int pname, int param);
    public abstract void PolygonOffset(float factor, float units);

    public abstract void ReadPixels(int x, int y, int width, int height,
                    int format, int type, GlArrayBufferView pixels);

    public abstract void RenderbufferStorage(int target, int internalformat,
                             int width, int height);
    public abstract void SampleCoverage(float value, bool invert);
    public abstract void Scissor(int x, int y, int width, int height);

    public abstract void ShaderSource(WebGLShader shader, string source);

    public abstract void StencilFunc(int func, int ref_, int mask);
    public abstract void StencilFuncSeparate(int face, int func, int ref_, int mask);
    public abstract void StencilMask(int mask);
    public abstract void StencilMaskSeparate(int face, int mask);
    public abstract void StencilOp(int fail, int zfail, int zpass);
    public abstract void StencilOpSeparate(int face, int fail, int zfail, int zpass);

    public abstract void TexImage2D(int target, int level, int internalformat,
                    int width, int height, int border, int format,
                    int type, GlArrayBufferView pixels);
    public abstract void TexImage2DImageData(int target, int level, int internalformat,
                    int format, int type, ImageData pixels);
    public abstract void TexImage2DImage(int target, int level, int internalformat,
                    int format, int type, HTMLImageElement image); // May throw DOMException
    public abstract void TexImage2DCanvas(int target, int level, int internalformat,
                    int format, int type, HTMLCanvasElement canvas); // May throw DOMException
    public abstract void TexImage2DVideo(int target, int level, int internalformat,
                    int format, int type, HTMLVideoElement video); // May throw DOMException

    public abstract void TexParameterf(int target, int pname, float param);
    public abstract void TexParameteri(int target, int pname, int param);

    public abstract void TexSubImage2D(int target, int level, int xoffset, int yoffset,
                       int width, int height,
                       int format, int type, GlArrayBufferView pixels);
    public abstract void TexSubImage2DImageData(int target, int level, int xoffset, int yoffset,
                           int format, int type, ImageData pixels);
    public abstract void TexSubImage2DImage(int target, int level, int xoffset, int yoffset,
                       int format, int type, HTMLImageElement image); // May throw DOMException
    public abstract void TexSubImage2DCanvas(int target, int level, int xoffset, int yoffset,
                       int format, int type, HTMLCanvasElement canvas); // May throw DOMException
    public abstract void TexSubImage2DVideo(int target, int level, int xoffset, int yoffset,
                               int format, int type, HTMLVideoElement video); // May throw DOMException

    public abstract void Uniform1f(WebGLUniformLocation location, float x);
    public abstract void Uniform1fv(WebGLUniformLocation location, float[] v);
    //    void uniform1fv(WebGLUniformLocation? location, sequence<float> v);
    public abstract void Uniform1i(WebGLUniformLocation location, int x);
    public abstract void Uniform1iv(WebGLUniformLocation location, int[] v);
    //    void uniform1iv(WebGLUniformLocation? location, sequence<long> v);
    public abstract void Uniform2f(WebGLUniformLocation location, float x, float y);
    public abstract void Uniform2fv(WebGLUniformLocation location, float[] v);
    //    void uniform2fv(WebGLUniformLocation? location, sequence<float> v);
    public abstract void Uniform2i(WebGLUniformLocation location, int x, int y);
    public abstract void Uniform2iv(WebGLUniformLocation location, int[] v);
    //    void uniform2iv(WebGLUniformLocation? location, sequence<long> v);
    public abstract void Uniform3f(WebGLUniformLocation location, float x, float y, float z);
    public abstract void Uniform3fv(WebGLUniformLocation location, float[] v);
    //    void uniform3fv(WebGLUniformLocation? location, sequence<float> v);
    public abstract void Uniform3i(WebGLUniformLocation location, int x, int y, int z);
    public abstract void Uniform3iv(WebGLUniformLocation location, int[] v);
    //    void uniform3iv(WebGLUniformLocation? location, sequence<long> v);
    //    void uniform4f(WebGLUniformLocation? location, float x, float y, float z, float w);
    public abstract void Uniform4fv(WebGLUniformLocation location, float[] v);
    //    void uniform4fv(WebGLUniformLocation? location, sequence<float> v);
    public abstract void Uniform4i(WebGLUniformLocation location, int x, int y, int z, int w);
    public abstract void Uniform4iv(WebGLUniformLocation location, int[] v);
    //    void uniform4iv(WebGLUniformLocation? location, sequence<long> v);

    public abstract void UniformMatrix2fv(WebGLUniformLocation location, bool transpose,
                          float[] value);
    //    void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, 
    //                          sequence<float> value);
    public abstract void UniformMatrix3fv(WebGLUniformLocation location, bool transpose,
                          float[] value);
    //    void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, 
    //                          sequence<float> value);
    public abstract void UniformMatrix4fv(WebGLUniformLocation location, bool transpose,
                          float[] value);
    //    void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, 
    //                          sequence<float> value);

    public abstract void UseProgram(WebGLProgram program);
    public abstract void ValidateProgram(WebGLProgram program);

    public abstract void VertexAttrib1f(int indx, float x);
    public abstract void VertexAttrib1fv(int indx, float[] values);
    //    void vertexAttrib1fv(int indx, sequence<float> values);
    public abstract void VertexAttrib2f(int indx, float x, float y);
    public abstract void VertexAttrib2fv(int indx, float[] values);
    //    void vertexAttrib2fv(int indx, sequence<float> values);
    public abstract void VertexAttrib3f(int indx, float x, float y, float z);
    public abstract void VertexAttrib3fv(int indx, float[] values);
    //    void vertexAttrib3fv(int indx, sequence<float> values);
    public abstract void VertexAttrib4f(int indx, float x, float y, float z, float w);
    public abstract void VertexAttrib4fv(int indx, float[] values);
    //    void vertexAttrib4fv(int indx, sequence<float> values);
    public abstract void VertexAttribPointer(int indx, int size, int type,
                             bool normalized, int stride, int offset);

    public abstract void Viewport(int x, int y, int width, int height);


    public abstract void AddOnNewFrame(NewFrameHandler handler);
    public abstract void AddOnKeyEvent(KeyEventHandler handler);
    public abstract void AddOnMouseEvent(MouseEventHandler handler);
    public abstract void AddOnTouchEvent(TouchEventHandler handler);

    public abstract void RequestPointerLock();
    public abstract void ExitPointerLock();
    public abstract bool IsPointerLockEnabled();

    public abstract void RequestFullScreen();
    public abstract void ExitFullScreen();
    public abstract bool IsFullScreenEnabled();

    public abstract void Start();

    public static Gl Create()
    {
        Gl gl;
#if CITO
#if CS
        native
        {
            gl = new CitoGl.OpenTk();
        }
#elif JAVA
        native
        {
            gl = new CitoGl.lib.GlJava();
        }
#elif JS
        native
        {
            gl = new WebGl();
        }
#elif C
#endif
#else
        gl = new CitoGl.OpenTk();
#endif
        return gl;
    }

    public abstract HTMLImageElement CreateHTMLImageElement();
    public abstract int GetCanvasWidth();
    public abstract int GetCanvasHeight();
}

public class KeyEventArgs
{
    int keyCode;
    public int GetKeyCode() { return keyCode; }
    public void SetKeyCode(int value) { keyCode = value; }
}

public class KeyPressEventArgs
{
    int keyChar;
    public int GetKeyChar() { return keyChar; }
    public void SetKeyChar(int value) { keyChar = value; }
}

public class GlKeys
{
    public const int PageUp = 33;
    public const int PageDown = 34;
    public const int Left = 37;
    public const int Up = 38;
    public const int Right = 39;
    public const int Down = 40;
}

public class GlDummy : Gl
{
    public override int DrawingBufferWidth()
    {
        return 0;
    }

    public override int DrawingBufferHeight()
    {
        return 0;
    }

    public override WebGLContextAttributes GetContextAttributes()
    {
        return null;
    }

    public override bool IsContextLost()
    {
        return false;
    }

    public override string[] GetSupportedExtensions(Int outCount)
    {
        return null;
    }

    public override GlObject GetExtension(string name)
    {
        return null;
    }

    public override void ActiveTexture(int texture)
    {
    }

    public override void AttachShader(WebGLProgram program, WebGLShader shader)
    {
    }

    public override void BindAttribLocation(WebGLProgram program, int index, string name)
    {
    }

    public override void BindBuffer(int target, WebGLBuffer buffer)
    {
    }

    public override void BindFramebuffer(int target, WebGLFramebuffer framebuffer)
    {
    }

    public override void BindRenderbuffer(int target, WebGLRenderbuffer renderbuffer)
    {
    }

    public override void BindTexture(int target, WebGLTexture texture)
    {
    }

    public override void BlendColor(float red, float green, float blue, float alpha)
    {
    }

    public override void BlendEquation(int mode)
    {
    }

    public override void BlendEquationSeparate(int modeRGB, int modeAlpha)
    {
    }

    public override void BlendFunc(int sfactor, int dfactor)
    {
    }

    public override void BlendFuncSeparate(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
    {
    }

    public override void BufferData1(int target, int size, int usage)
    {
    }

    public override void BufferData2(int target, GlArrayBufferView data, int usage)
    {
    }

    public override void BufferData3(int target, GlArrayBuffer data, int usage)
    {
    }

    public override void BufferDataFloat(int target, float[] data, int usage)
    {
    }

    public override void BufferDataUshort(int target, int[] data, int usage)
    {
    }

    public override void BufferSubData1(int target, int offset, GlArrayBufferView data)
    {
    }

    public override void BufferSubData2(int target, int offset, GlArrayBuffer data)
    {
    }

    public override int CheckFramebufferStatus(int target)
    {
        return 0;
    }

    public override void Clear(int mask)
    {
    }

    public override void ClearColor(float red, float green, float blue, float alpha)
    {
    }

    public override void ClearDepth(float depth)
    {
    }

    public override void ClearStencil(int s)
    {
    }

    public override void ColorMask(bool red, bool green, bool blue, bool alpha)
    {
    }

    public override void CompileShader(WebGLShader shader)
    {
    }

    public override void CompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, GlArrayBufferView data)
    {
    }

    public override void CompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, GlArrayBufferView data)
    {
    }

    public override void CopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border)
    {
    }

    public override void CopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
    {
    }

    public override WebGLBuffer CreateBuffer()
    {
        return null;
    }

    public override WebGLFramebuffer CreateFramebuffer()
    {
        return null;
    }

    public override WebGLProgram CreateProgram()
    {
        return null;
    }

    public override WebGLRenderbuffer CreateRenderbuffer()
    {
        return null;
    }

    public override WebGLShader CreateShader(int type)
    {
        return null;
    }

    public override WebGLTexture CreateTexture()
    {
        return null;
    }

    public override void CullFace(int mode)
    {
    }

    public override void DeleteBuffer(WebGLBuffer buffer)
    {
    }

    public override void DeleteFramebuffer(WebGLFramebuffer framebuffer)
    {
    }

    public override void DeleteProgram(WebGLProgram program)
    {
    }

    public override void DeleteRenderbuffer(WebGLRenderbuffer renderbuffer)
    {
    }

    public override void DeleteShader(WebGLShader shader)
    {
    }

    public override void DeleteTexture(WebGLTexture texture)
    {
    }

    public override void DepthFunc(int func)
    {
    }

    public override void DepthMask(bool flag)
    {
    }

    public override void DepthRange(float zNear, float zFar)
    {
    }

    public override void DetachShader(WebGLProgram program, WebGLShader shader)
    {
    }

    public override void Disable(int cap)
    {
    }

    public override void DisableVertexAttribArray(int index)
    {
    }

    public override void DrawArrays(int mode, int first, int count)
    {
    }

    public override void DrawElements(int mode, int count, int type, int offset)
    {
    }

    public override void Enable(int cap)
    {
    }

    public override void EnableVertexAttribArray(int index)
    {
    }

    public override void Finish()
    {
    }

    public override void Flush()
    {
    }

    public override void FramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, WebGLRenderbuffer renderbuffer)
    {
    }

    public override void FramebufferTexture2D(int target, int attachment, int textarget, WebGLTexture texture, int level)
    {
    }

    public override void FrontFace(int mode)
    {
    }

    public override void GenerateMipmap(int target)
    {
    }

    public override WebGLActiveInfo GetActiveAttrib(WebGLProgram program, int index)
    {
        return null;
    }

    public override WebGLActiveInfo GetActiveUniform(WebGLProgram program, int index)
    {
        return null;
    }

    public override WebGLShader[] GetAttachedShaders(WebGLProgram program, Int outCount)
    {
        return null;
    }

    public override int GetAttribLocation(WebGLProgram program, string name)
    {
        return 0;
    }

    public override GlObject GetBufferParameter(int target, int pname)
    {
        return null;
    }

    public override GlObject GetParameter(int pname)
    {
        return null;
    }

    public override int GetError()
    {
        return 0;
    }

    public override GlObject GetFramebufferAttachmentParameter(int target, int attachment, int pname)
    {
        return null;
    }

    public override string GetProgramParameter(WebGLProgram program, int pname)
    {
        return null;
    }

    public override string GetProgramInfoLog(WebGLProgram program)
    {
        return null;
    }

    public override GlObject GetRenderbufferParameter(int target, int pname)
    {
        return null;
    }

    public override GlObject GetShaderParameter(WebGLShader shader, int pname)
    {
        return null;
    }

    public override WebGLShaderPrecisionFormat GetShaderPrecisionFormat(int shadertype, int precisiontype)
    {
        return null;
    }

    public override string GetShaderInfoLog(WebGLShader shader)
    {
        return null;
    }

    public override string GetShaderSource(WebGLShader shader)
    {
        return null;
    }

    public override GlObject GetTexParameter(int target, int pname)
    {
        return null;
    }

    public override GlObject GetUniform(WebGLProgram program, WebGLUniformLocation location)
    {
        return null;
    }

    public override WebGLUniformLocation GetUniformLocation(WebGLProgram program, string name)
    {
        return null;
    }

    public override GlObject GetVertexAttrib(int index, int pname)
    {
        return null;
    }

    public override int GetVertexAttribOffset(int index, int pname)
    {
        return 0;
    }

    public override void Hint(int target, int mode)
    {
    }

    public override bool IsBuffer(WebGLBuffer buffer)
    {
        return false;
    }

    public override bool IsEnabled(int cap)
    {
        return false;
    }

    public override bool IsFramebuffer(WebGLFramebuffer framebuffer)
    {
        return false;
    }

    public override bool IsProgram(WebGLProgram program)
    {
        return false;
    }

    public override bool IsRenderbuffer(WebGLRenderbuffer renderbuffer)
    {
        return false;
    }

    public override bool IsShader(WebGLShader shader)
    {
        return false;
    }

    public override bool IsTexture(WebGLTexture texture)
    {
        return false;
    }

    public override void LineWidth(float width)
    {
    }

    public override void LinkProgram(WebGLProgram program)
    {
    }

    public override void PixelStorei(int pname, int param)
    {
    }

    public override void PolygonOffset(float factor, float units)
    {
    }

    public override void ReadPixels(int x, int y, int width, int height, int format, int type, GlArrayBufferView pixels)
    {
    }

    public override void RenderbufferStorage(int target, int internalformat, int width, int height)
    {
    }

    public override void SampleCoverage(float value, bool invert)
    {
    }

    public override void Scissor(int x, int y, int width, int height)
    {
    }

    public override void ShaderSource(WebGLShader shader, string source)
    {
    }

    public override void StencilFunc(int func, int ref_, int mask)
    {
    }

    public override void StencilFuncSeparate(int face, int func, int ref_, int mask)
    {
    }

    public override void StencilMask(int mask)
    {
    }

    public override void StencilMaskSeparate(int face, int mask)
    {
    }

    public override void StencilOp(int fail, int zfail, int zpass)
    {
    }

    public override void StencilOpSeparate(int face, int fail, int zfail, int zpass)
    {
    }

    public override void TexImage2D(int target, int level, int internalformat,
                    int width, int height, int border, int format,
                    int type, GlArrayBufferView pixels)
    {
    }

    public override void TexImage2DImageData(int target, int level, int internalformat,
                    int format, int type, ImageData pixels)
    {
    }

    public override void TexImage2DImage(int target, int level, int internalformat,
                    int format, int type, HTMLImageElement image)
    {
    }

    public override void TexImage2DCanvas(int target, int level, int internalformat,
                    int format, int type, HTMLCanvasElement canvas)
    {
    }

    public override void TexImage2DVideo(int target, int level, int internalformat,
                    int format, int type, HTMLVideoElement video)
    {
    }

    public override void TexParameterf(int target, int pname, float param)
    {
    }

    public override void TexParameteri(int target, int pname, int param)
    {
    }

    public override void TexSubImage2D(int target, int level, int xoffset, int yoffset,
                       int width, int height,
                       int format, int type, GlArrayBufferView pixels)
    {
    }

    public override void TexSubImage2DImageData(int target, int level, int xoffset, int yoffset,
                           int format, int type, ImageData pixels)
    {
    }

    public override void TexSubImage2DImage(int target, int level, int xoffset, int yoffset,
                       int format, int type, HTMLImageElement image)
    {
    }

    public override void TexSubImage2DCanvas(int target, int level, int xoffset, int yoffset,
                       int format, int type, HTMLCanvasElement canvas)
    {
    }

    public override void TexSubImage2DVideo(int target, int level, int xoffset, int yoffset,
                               int format, int type, HTMLVideoElement video)
    {
    }

    public override void Uniform1f(WebGLUniformLocation location, float x)
    {
    }

    public override void Uniform1fv(WebGLUniformLocation location, float[] v)
    {
    }

    public override void Uniform1i(WebGLUniformLocation location, int x)
    {
    }

    public override void Uniform1iv(WebGLUniformLocation location, int[] v)
    {
    }

    public override void Uniform2f(WebGLUniformLocation location, float x, float y)
    {
    }

    public override void Uniform2fv(WebGLUniformLocation location, float[] v)
    {
    }

    public override void Uniform2i(WebGLUniformLocation location, int x, int y)
    {
    }

    public override void Uniform2iv(WebGLUniformLocation location, int[] v)
    {
    }

    public override void Uniform3f(WebGLUniformLocation location, float x, float y, float z)
    {
    }

    public override void Uniform3fv(WebGLUniformLocation location, float[] v)
    {
    }

    public override void Uniform3i(WebGLUniformLocation location, int x, int y, int z)
    {
    }

    public override void Uniform3iv(WebGLUniformLocation location, int[] v)
    {
    }

    public override void Uniform4fv(WebGLUniformLocation location, float[] v)
    {
    }

    public override void Uniform4i(WebGLUniformLocation location, int x, int y, int z, int w)
    {
    }

    public override void Uniform4iv(WebGLUniformLocation location, int[] v)
    {
    }

    public override void UniformMatrix2fv(WebGLUniformLocation location, bool transpose, float[] value)
    {
    }

    public override void UniformMatrix3fv(WebGLUniformLocation location, bool transpose, float[] value)
    {
    }

    public override void UniformMatrix4fv(WebGLUniformLocation location, bool transpose, float[] value)
    {
    }

    public override void UseProgram(WebGLProgram program)
    {
    }

    public override void ValidateProgram(WebGLProgram program)
    {
    }

    public override void VertexAttrib1f(int indx, float x)
    {
    }

    public override void VertexAttrib1fv(int indx, float[] values)
    {
    }

    public override void VertexAttrib2f(int indx, float x, float y)
    {
    }

    public override void VertexAttrib2fv(int indx, float[] values)
    {
    }

    public override void VertexAttrib3f(int indx, float x, float y, float z)
    {
    }

    public override void VertexAttrib3fv(int indx, float[] values)
    {
    }

    public override void VertexAttrib4f(int indx, float x, float y, float z, float w)
    {
    }

    public override void VertexAttrib4fv(int indx, float[] values)
    {
    }

    public override void VertexAttribPointer(int indx, int size, int type, bool normalized, int stride, int offset)
    {
    }

    public override void Viewport(int x, int y, int width, int height)
    {
    }

    public override void AddOnNewFrame(NewFrameHandler handler)
    {
    }

    public override void Start()
    {
    }

    public override HTMLImageElement CreateHTMLImageElement()
    {
        return null;
    }

    public override void AddOnKeyEvent(KeyEventHandler handler)
    {
    }

    public override int GetCanvasWidth()
    {
        return 0;
    }

    public override int GetCanvasHeight()
    {
        return 0;
    }

    public override void AddOnMouseEvent(MouseEventHandler handler)
    {
    }

    public override void AddOnTouchEvent(TouchEventHandler handler)
    {
    }

    public override void RequestPointerLock()
    {
    }

    public override void ExitPointerLock()
    {
    }

    public override bool IsPointerLockEnabled()
    {
        return false;
    }

    public override void RequestFullScreen()
    {
    }

    public override void ExitFullScreen()
    {
    }

    public override bool IsFullScreenEnabled()
    {
        return false;
    }
}

//[Constructor(string type, optional WebGLContextEventInit eventInit)]
//interface WebGLContextEvent : Event {
//    readonly attribute string statusMessage;
//};

// // EventInit is defined in the DOM4 specification.
//dictionary WebGLContextEventInit : EventInit {
//    string statusMessage;
//};
